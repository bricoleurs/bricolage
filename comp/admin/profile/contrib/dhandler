<script type="text/javascript">
function contribJump(obj) {
    window.location.href = "/admin/profile/contrib/edit/<% $id %>/"
                           + obj[obj.selectedIndex].value;
}
</script>
% if (ENABLE_WYSIWYG) {
% # WYSIWYG code here, only used if textarea is in the page with wysiwyg on.
<& /widgets/wysiwyg/load.mc &>
% }
<form method="post" action="<% $r->uri %>" name="contrib_profile" onsubmit="return confirmChanges(this)">

<%perl>;
$m->comp('/widgets/profile/hidden.mc',
     value => $id,
     name => 'contrib_id'
) if defined $id;

# Display the referential fields.
$m->comp("/widgets/wrappers/table_top.mc",
     caption => "Properties",
     number  => 1
);

$m->comp('/widgets/profile/dumpRemainingFields.mc',
    objref => $contrib,
    readOnly => $no_edit,
    fieldsUsed => {
        name   => 1,
        active => 1
    }
);

$m->comp("/widgets/wrappers/table_bottom.mc");

# have the user select a group and role
if ($mode eq "new") {
    $m->comp('/widgets/profile/hidden.mc',
         value => $mode,
         name => 'mode'
    );

    # choose group
    my $groups = Bric::Util::Grp::Person->list({ all => 1 });
    my $options;
    my $instanceGrpId = Bric::Biz::Person->INSTANCE_GROUP_ID;
    foreach my $group (@$groups) {
        $options->{$group->get_id} = $group->get_name
          if ($group->get_id != $instanceGrpId);
    }

    $m->comp("/widgets/wrappers/table_top.mc",
         caption => "Contributor Type",
         number  => 2
    );

    $m->comp("/widgets/profile/select.mc",
         value     => 'group',
         disp      => 'Contributor Type',
         options   => $options,
         name      => 'group',
         readOnly  => $no_edit
    );

    $m->comp("/widgets/wrappers/table_bottom.mc");

    &$stepOneOfTwo($type, $section);

} elsif ( $mode eq "edit" ) {
    # show full edit screen if role is well defined.
    $m->comp('/widgets/profile/hidden.mc',
        value => $mode,
        name => 'mode'
    );

    my $contacts = $contrib->get_obj->get_contacts;

    # Display the Contact info.
    $m->comp("/widgets/wrappers/table_top.mc",
         caption => "Contacts",
         number  => 2
    );

    $m->out(qq{<div style="padding: 10px;">});
    $m->comp('/widgets/add_more/add_more.mc',
         type      => 'contact',
         fields    => [qw(type value)],
         name      => 'contact',
         objs      => $contacts,
         read_only => $no_edit,
         param     => \%ARGS,
         no_labels => 1
    );
    $m->out(qq{</div>});

    $m->comp("/widgets/wrappers/table_bottom.mc");
    # end contact info

    # display attrs
    $m->comp("/widgets/wrappers/table_top.mc",
         caption => "Custom Fields",
         number  => 3
    );

    my $subs_to_display = [];
    for my $sub (sort { $a cmp $b } @subsys) {

        # if this is a new extension, get the meta data from the default instance
        my $default = $contrib->all_for_subsys;
        my $all = ($ARGS{subsys} && $sub eq $ARGS{subsys}) ? $default : $contrib->all_for_subsys($sub);

        # sort the attrs and build an array
        my $attr = [];
        my @sortedAttrs = sort {
            $default->{$a}{meta}{pos}{value} <=> $default->{$b}{meta}{pos}{value}
        } keys %$default;

        foreach my $key (@sortedAttrs ) {
            $default->{$key}{name} = $sub . "|" . $key;
            $default->{$key}{value} = $all->{$key}{value};
            push @$attr, $default->{$key};
        }

        if (@$attr) {
            # Build an array of subsys to display, with Default always first
            if ($sub eq '_MEMBER_SUBSYS') {
                unshift @$subs_to_display, [$sub, $attr];
            } else {
                push @$subs_to_display, [$sub, $attr];
            }
        }
    }
</%perl>

    <script type="text/javascript">
       var subsysTabs;
    </script>
    <div id="subsys_tabs" class="tabs clearboth">
%   foreach my $sub (@$subs_to_display) {
%       my ($name, $attr) = @$sub;
%       my $selected = ($ARGS{subsys} && $name eq $ARGS{subsys}) || (!$ARGS{subsys} && $name eq '_MEMBER_SUBSYS');
%       (my $safe_sub = $name) =~ s/[\s|]/_/g;   # Replace spaces and pipes with _
        <div id="subsys_<% $safe_sub %>" class="tab<% $selected ? ' selected' : '' %>">
        <a href="#" onclick="subsysTabs.switchTab(this.parentNode); return false"><% $name eq '_MEMBER_SUBSYS' ? 'Default' : $name %></a>
        </div>
%   }
    </div>

    <div id="subsys_tab_pages" class="tabPages clearboth">
%   foreach my $sub (@$subs_to_display) {
%       my ($name, $attr) = @$sub;
%       (my $safe_sub = $name) =~ s/\s|\|/_/g;   # Replace spaces and pipes with _
        <div id="subsys_<% $safe_sub %>_page" class="page" style="display: none">
        <& "/widgets/profile/displayAttrs.mc",
             attr        => $attr,
             form_name   => 'contrib_profile',
             readOnly    => $no_edit,
             usePosition => 0,
             useDelete   => 0
        &>
        </div>
%   }
    </div>

    <script type="text/javascript">
       subsysTabs = new Tabs('subsys_tabs', 'subsys_tab_pages');
    </script>

    <& "/widgets/wrappers/table_bottom.mc" &>

    <& '/widgets/profile/formButtons.mc',
        type    => $type,
        widget  => $type,
        section => $section,
        no_del  => $no_del,
        no_save => $no_edit,
        return  => '/admin/manager/contrib'
    &>

<%perl>
} elsif ( $mode eq "extend" ) {

    $m->comp('/widgets/profile/hidden.mc',
        value => $mode,
        name => 'mode'
    );

    $m->comp("/widgets/wrappers/table_top.mc",
        caption => "Roles",
        number  => 2
    );

    # Display a read-only list of existing roles, if more than one.
    if (@subsys > 1) {
        $m->out(qq{<div class="row">});
        $m->out(qq{<div class="label">} . $lang->maketext('Existing roles') . qq{:</div>});
        $m->out(qq{<div class="input">} . join(", ", grep { $_ ne '_MEMBER_SUBSYS' } @subsys) . qq{</div>});
        $m->out(qq{</div>});
    }

    # Send the roles to javascript so we can check before submitting
    $m->out(qq{\n<script type="text/javascript">\n});
    $m->out("var roles = new Array(");
    $m->out(join(", ", map { qq{'$_'} } grep { $_ ne '_MEMBER_SUBSYS' } @subsys));
    $m->out(");\n</script>\n");

    # text box for new role name
    $m->comp("/widgets/profile/text.mc",
        disp    => 'New Role Name',
        name    => 'subsys',
        useTable => 1
    );

    $m->comp("/widgets/wrappers/table_bottom.mc");

    &$stepOneOfTwo($type, $section);
}
</%perl>
</form>
<& '/widgets/wrappers/footer.mc', param => \%ARGS &>

<%init>;
# Do any redirects first.
do_queued_redirect();

# split uri. expected url is in this format:
# /admin/profile/contrib/mode/id
my @tmp = split /\//, $r->uri;
my $mode = $ARGS{mode} || $tmp[4] || 'new';

my $id = $ARGS{contrib_id} || $tmp[5];

my $state     = get_state_data("contrib_profile");
my $extending = $state->{extending};

# Instantiate an object.
my $contrib = $ARGS{obj};
if (!$id) {
    $mode = 'new';
    $contrib ||= Bric::Biz::Person->new;
    clear_state("contrib_profile");
} else {
    $contrib ||= $class->lookup({ id => $id});
    $id ||= $contrib->get_id;
}

# gather all subsys names
my @subsys = $mode eq "new" ? () : $contrib->subsys_names;
# if there's none (ie, new contrib), assign the default
push @subsys, "_MEMBER_SUBSYS" if !@subsys;
push @subsys, $ARGS{subsys} if $ARGS{subsys};

# Check authorization.
chk_authz($contrib, $id ? READ : CREATE);
my $no_edit = !chk_authz($contrib, (defined $id ? EDIT : CREATE), 1);
my $no_del = !$id || $no_edit;

# Get the name for the breadcrumb trail.
my $crumb = $contrib->get_name;
$crumb = $crumb ? "&quot;$crumb&quot;" : 'New';

# Roll in any changes to the contributor if we're just adding contacts.
if (exists($ARGS{'addmore_type'}) && $ARGS{'addmore_type'} eq 'contact') {
    foreach my $meth ($contrib->my_meths(1)) {
        $meth->{set_meth}->($contrib, @{$meth->{set_args}}, $ARGS{$meth->{name}})
          if defined $meth->{set_meth};
    }
}

my $context   = "Admin | Profile | $disp | $crumb";

# print standard header
$m->comp('/widgets/wrappers/header.mc',
    title   => "$disp Profile",
    context => $context
);

################################################################################
################################################################################
</%init>

<%once>;
my $class = 'Bric::Util::Grp::Parts::Member::Contrib';
my $type = 'contrib';
my $section = 'admin';
my $disp = get_disp_name($type);

my $stepOneOfTwo = sub {
    my ($type, $section) = @_;
    $m->comp('/widgets/profile/formButtons.mc',
        type    => $type,
        section => $section,
        # be careful that formButtons.mc doesn't depend on $widget eq 'profile'
        widget  => $type,
        no_del  => 1,
        val     => "next_dkgreen",
        return  => '/admin/manager/contrib'
    );
};
</%once>

<%doc>
###############################################################################

=head1 NAME

/admin/profile/contrib/dhandler - Contributor Profile.

=head1 DATE

$LastChangedDate$

=head1 DESCRIPTION

This dhandler manages contributor profiles.

</%doc>
